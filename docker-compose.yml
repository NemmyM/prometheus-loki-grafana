networks:
  loki:

volumes:
  prometheus-data:
  grafana-data:

services:
  read:
    image: grafana/loki:latest
    env_file: ./.env
    command: "-config.file=/etc/loki/config.yaml -config.expand-env=true -target=read"
    restart: unless-stopped
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: 
      - loki

  write:
    image: grafana/loki:latest
    env_file: ./.env
    command: "-config.file=/etc/loki/config.yaml -config.expand-env=true -target=write"
    restart: unless-stopped
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      - loki

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log/:/var/log/:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    restart: unless-stopped
    depends_on:
      - gateway
    networks:
      - loki
    hostname: promloki-host

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      [
        '--config.file=/etc/prometheus/prometheus.yml',
        '--web.enable-remote-write-receiver',
        '--storage.tsdb.retention.time=45d'
      ]
    restart: unless-stopped
    networks:
      - loki

  minio:
    image: minio/minio
    env_file: ./.env
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=${access_key_id}
      - MINIO_ROOT_PASSWORD=${secret_access_key}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - ./.data/minio:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    depends_on:
      - gateway
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            orgId: 1
            isDefault: false
            version: 1
            editable: false
            url: http://read:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
          - name: prometheus
            orgId: 1
            access: proxy
            editable: false
            isDefault: false
            type: prometheus
            uid: prometheus
            url: http://prometheus:9090
            version: 1
        EOF
        /run.sh

  backend:
    image: grafana/loki:latest
    env_file: ./.env
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    command: "-config.file=/etc/loki/config.yaml -config.expand-env=true -target=backend -legacy-read-mode=false"
    restart: unless-stopped
    depends_on:
      - gateway
    networks:
      - loki

  gateway:
    image: nginx:latest
    volumes:
      - ./.htpasswd:/etc/nginx/.htpasswd
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             9090;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location / {
                proxy_pass       http://prometheus:9090;
                auth_basic       "Prometheus Authentication";
                auth_basic_user_file /etc/nginx/.htpasswd;
            }
        }

          server {
            listen             3100;
            auth_basic       "Prometheus Authentication";
            auth_basic_user_file /etc/nginx/.htpasswd;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    restart: unless-stopped
    ports:
      - "3100:3100"
      - "9090:9090"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki
